  const uint16_t one                  = 0x0001;
  const uint16_t h_s_mask             = 0x8000;
  const uint16_t h_e_mask             = 0x7c00;
  const uint16_t h_m_mask             = 0x03ff;
  const uint16_t h_m_msb_mask         = 0x2000;
  const uint16_t h_m_hidden           = 0x0400;
  const uint16_t h_e_pos              = 0x000a;
  const uint16_t h_e_bias             = 0x000f;
  const uint16_t h_m_grs_carry        = 0x4000;
  const uint16_t h_m_grs_carry_pos    = 0x000e;
  const uint16_t h_grs_size           = 0x0003;
  const uint16_t h_grs_round_carry    = uint16_sll( one, h_grs_size );
  const uint16_t h_grs_round_mask     = uint16_sub( h_grs_round_carry, one );
  const uint16_t x_s                  = uint16_and( x, h_s_mask );
  const uint16_t x_e                  = uint16_and( x, h_e_mask );
  const uint16_t x_m                  = uint16_and( x, h_m_mask );
  const uint16_t y_s                  = uint16_and( y, h_s_mask );
  const uint16_t y_e                  = uint16_and( y, h_e_mask );
  const uint16_t y_m                  = uint16_and( y, h_m_mask );
  const uint16_t is_y_e_larger        = uint16_gt( y_e, x_e );
  const uint16_t a_s                  = uint16_mux( is_y_e_larger, y_s, x_s );
  const uint16_t a_e                  = uint16_mux( is_y_e_larger, y_e, x_e );
  const uint16_t a_m_no_hidden_bit    = uint16_mux( is_y_e_larger, y_m, x_m );
  const uint16_t b_s                  = uint16_mux( is_y_e_larger, x_s, y_s );
  const uint16_t b_e                  = uint16_mux( is_y_e_larger, x_e, y_e );
  const uint16_t b_m_no_hidden_bit    = uint16_mux( is_y_e_larger, x_m, y_m );
  const uint16_t a_e_m_no_hidden_bit  = uint16_or( a_e, a_m_no_hidden_bit );
  const uint16_t a_is_inf             = uint16_eq( a_e_m_no_hidden_bit, h_e_mask );
  const uint16_t a_inf                = uint16_or( a_s, h_e_mask );
  const uint16_t a_e_nzero            = uint16_nez( a_e );
  const uint16_t b_e_nzero            = uint16_nez( b_e );
  const uint16_t a_m_hidden_bit       = uint16_and( a_e_nzero, h_m_hidden );
  const uint16_t b_m_hidden_bit       = uint16_and( b_e_nzero, h_m_hidden );
  const uint16_t a_m_no_grs           = uint16_or( a_m_no_hidden_bit, a_m_hidden_bit );
  const uint16_t b_m_no_grs           = uint16_or( b_m_no_hidden_bit, b_m_hidden_bit );
  const uint16_t a_e_unbias           = uint16_sub( a_e, h_e_bias );
  const uint16_t a_e_unbias_adj       = uint16_sub( a_e_unbias, one );
  const uint16_t m_sa_unbias          = uint16_srl( a_e_unbias_adj, h_e_pos );
  const uint16_t diff_e               = uint16_sub( a_e, b_e );
  const uint16_t m_sa_default         = uint16_srl( diff_e, h_e_pos );
  const uint16_t b_e_z_mask           = uint16_eqz( b_e );
  const uint16_t a_e_nez_mask         = uint16_nez( a_e );
  const uint16_t m_sa_unbias_mask     = uint16_and( b_e_z_mask, a_e_nez_mask );
  const uint16_t m_sa                 = uint16_mux( m_sa_unbias_mask, m_sa_unbias, m_sa_default );
  const uint16_t a_m                  = uint16_sll( a_m_no_grs, h_grs_size );
  const uint16_t b_m_no_sticky        = uint16_sll( b_m_no_grs, h_grs_size );
  const uint16_t sh_m                 = uint16_srl( b_m_no_sticky, m_sa );
  const uint16_t sticky_overflow      = uint16_sll( one, m_sa );
  const uint16_t sticky_mask          = uint16_sub( sticky_overflow, one );
  const uint16_t sticky               = uint16_nez_p( b_m_no_sticky & sticky_mask );
  const uint16_t b_m                  = uint16_or( sh_m, sticky );
  const uint16_t a_e_biased           = uint16_srl( a_e, h_e_pos );
  const uint16_t sel_sign             = uint16_xor( a_s, b_s );
  const uint16_t is_diff_sign         = uint16_nez( sel_sign );
  const uint16_t z_m_sum              = uint16_add( a_m, b_m );
  const uint16_t z_m_diff_ab          = uint16_sub( a_m, b_m );
  const uint16_t z_m_diff_ba          = uint16_sub( b_m, a_m );
  const uint16_t is_z_m_ab_pos        = uint16_gt( a_m, b_m );
  const uint16_t z_m_smag_diff        = uint16_mux( is_z_m_ab_pos, z_m_diff_ab, z_m_diff_ba );
  const uint16_t z_s_diff             = uint16_mux( is_z_m_ab_pos, a_s, b_s );
  const uint16_t z_s                  = uint16_mux( is_diff_sign, z_s_diff, a_s );
  const uint16_t z_m_smag_diff_nlz    = uint16_cntlz( z_m_smag_diff );
  const uint16_t diff_norm_sa         = uint16_sub( z_m_smag_diff_nlz, one );
  const uint16_t is_diff_denorm       = uint16_lt( a_e_biased, diff_norm_sa );
  const uint16_t diff_denorm_sa       = uint16_sub( a_e_biased, one );
  const uint16_t z_m_diff_denorm      = uint16_sll( z_m_smag_diff, diff_denorm_sa );
  const uint16_t z_m_diff_norm        = uint16_sll( z_m_smag_diff, diff_norm_sa );
  const uint16_t c_e_diff_norm        = uint16_sub( a_e_biased,  diff_norm_sa );
  const uint16_t is_a_or_b_norm       = uint16_nez( a_e_biased );
  const uint16_t z_m_diff_ab_norm     = uint16_mux( is_diff_denorm, z_m_diff_denorm, z_m_diff_norm );
  const uint16_t c_e_diff_ab_norm     = uint16_andc( c_e_diff_norm, is_diff_denorm );
  const uint16_t z_m_diff_ab_denorm   = uint16_cp( z_m_smag_diff );
  const uint16_t c_e_diff_ab_denorm   = uint16_cp( a_e_biased );
  const uint16_t z_m_diff             = uint16_mux( is_a_or_b_norm, z_m_diff_ab_norm, z_m_diff_ab_denorm );
  const uint16_t c_e_diff             = uint16_mux( is_a_or_b_norm, c_e_diff_ab_norm, c_e_diff_ab_denorm );
  const uint16_t is_diff_zero         = uint16_eqz( z_m_diff );
  const uint16_t is_diff_exactly_zero = uint16_and( is_diff_sign, is_diff_zero );
  const uint16_t z_m_added            = uint16_mux( is_diff_sign, z_m_diff, z_m_sum );
  const uint16_t c_e_added            = uint16_mux( is_diff_sign, c_e_diff, a_e_biased );
  const uint16_t z_m_carry            = uint16_and( z_m_added, h_m_grs_carry );
  const uint16_t is_z_m_carry         = uint16_nez( z_m_carry );
  const uint16_t c_e_hidden_offset    = uint16_andsrl( z_m_added, h_m_grs_carry, h_m_grs_carry_pos);
  const uint16_t z_m_sub_hidden       = uint16_srl( z_m_added, one );
  const uint16_t z_m_no_hidden        = uint16_mux( is_z_m_carry, z_m_sub_hidden, z_m_added );
  const uint16_t c_e_no_hidden        = uint16_add( c_e_added, c_e_hidden_offset );
  const uint16_t is_undenorm          = uint16_eqz_p( a_e );
  const uint16_t undenorm_m_msb_odd   = uint16_nez_p( z_m_no_hidden & h_m_msb_mask );
  const uint16_t undenorm_fix_e       = uint16_and( is_undenorm, undenorm_m_msb_odd );
  const uint16_t c_e_fixed            = uint16_add( c_e_no_hidden, undenorm_fix_e );
  const uint16_t z_m_round_amount     = uint16_and( z_m_no_hidden, h_grs_round_mask );
  const uint16_t z_m_rounded          = uint16_add( z_m_no_hidden, z_m_round_amount );
  const uint16_t z_m_round_overflow   = uint16_andsrl( z_m_rounded, h_m_grs_carry, h_m_grs_carry_pos );
  const uint16_t c_e_rounded          = uint16_add( c_e_fixed, z_m_round_overflow );
  const uint16_t z_m_no_grs           = uint16_srlm( z_m_rounded, h_grs_size,  h_m_mask );
  const uint16_t z_e                  = uint16_sll( c_e_rounded, h_e_pos );
  const uint16_t z_packed             = uint16_or3( z_s, z_e, z_m_no_grs );
  const uint16_t check_inf_result     = uint16_mux( a_is_inf, a_inf, z_packed );
  const uint16_t check_zero_result    = uint16_andc( check_inf_result, is_diff_exactly_zero );
  const uint16_t result               = uint16_cp( check_zero_result );
